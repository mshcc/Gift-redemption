<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.siro.producer.mapper.LogisticsMapper">
    <cache type="com.siro.producer.utils.RedisCache"/>

    <resultMap id="BaseResultMap" type="com.siro.model.Logistics">
        <!--@mbg.generated-->
        <!--@Table logistics-->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="gif_id" jdbcType="INTEGER" property="gifId"/>
        <result column="recipientid" jdbcType="INTEGER" property="recipientid"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="exchangeid" jdbcType="INTEGER" property="exchangeid"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id, gif_id, recipientid,exchangeid ,`status`
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        <!--@mbg.generated-->
        select
        <include refid="Base_Column_List"/>
        from logistics
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        <!--@mbg.generated-->
        delete
        from logistics
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.siro.model.Logistics">
        <!--@mbg.generated-->
        insert into logistics (id, gif_id,
                               recipientid, `status`, exchangeid)
        values (#{id,jdbcType=INTEGER}, #{gifId,jdbcType=INTEGER},
                #{recipientid,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{exchangeid,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" parameterType="com.siro.model.Logistics">
        <!--@mbg.generated-->
        insert into logistics
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="gifId != null">
                gif_id,
            </if>
            <if test="recipientid != null">
                recipientid,
            </if>
            <if test="status != null">
                `status`,
            </if>
            <if test="exchangeid != null">
                `exchangeid`,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="gifId != null">
                #{gifId,jdbcType=INTEGER},
            </if>
            <if test="recipientid != null">
                #{recipientid,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="exchangeid != null">
                #{exchangeid,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.siro.model.Logistics">
        <!--@mbg.generated-->
        update logistics
        <set>
            <if test="gifId != null">
                gif_id = #{gifId,jdbcType=INTEGER},
            </if>
            <if test="recipientid != null">
                recipientid = #{recipientid,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=INTEGER},
            </if>
            <if test="exchangeid != null">
                exchangeid=#{exchangeid,jdbcType=INTEGER}
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.siro.model.Logistics">
        <!--@mbg.generated-->
        update logistics
        set gif_id      = #{gifId,jdbcType=INTEGER},
            recipientid = #{recipientid,jdbcType=INTEGER},
            `status`    = #{status,jdbcType=INTEGER},
            exchangeid  =#{exchangeid,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="findPage" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from logistics
    </select>

    <select id="findPageByNotShipped" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from logistics
        where status = 0
    </select>

    <select id="findPageShipped" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from logistics
        where status = 2
    </select>

    <select id="findPageToBeCollected" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from logistics
        where status = 1
    </select>

    <select id="findPageHasBeenSigned" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from logistics
        where status = 3
    </select>
</mapper>